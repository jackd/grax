import grax.config
import grax.huf_utils
import grax.problems.single.fit
import huf
import huf.callbacks
import huf.cli
import huf.config
import huf.configurables

include "huf_config/models/base.gin"
include "huf_config/models/classifier.gin"

net_transform = @grax.problems.single.semi_supervised_net_fun
grax.problems.single.semi_supervised_net_fun.module_fun = %module_fun

huf.cli.main.fun = @grax.problems.single.fit_semi_supervised
huf.cli.main.callbacks = [@huf.experiments.Logger()]

grax.problems.single.fit_semi_supervised.initial_state = %seed
grax.problems.single.fit_semi_supervised.model = %model
grax.problems.single.fit_semi_supervised.data = %data
grax.problems.single.fit_semi_supervised.steps = %steps
grax.problems.single.fit_semi_supervised.callbacks = %callbacks
grax.problems.single.fit_semi_supervised.dtype = %dtype

dtype = "float32"

callbacks = [
    @huf.callbacks.EpochProgbarLogger(),
    @huf.callbacks.EarlyStopping(),
    @huf.callbacks.TerminateOnNaN(),
]
seed = 0
huf.callbacks.EarlyStopping.objective = %objective
huf.callbacks.EarlyStopping.patience = %patience
huf.callbacks.EarlyStopping.restore_best = True

objective = @huf.objective()
patience = 100
