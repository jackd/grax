import grax.config
import grax.graph_utils.transforms
import grax.projects.dagnn.modules
import huf.configurables

node_features_transform = [
    @grax.graph_utils.transforms.row_normalize,
    @grax.graph_utils.transforms.to_format
]
graph_transform = [
    @grax.graph_utils.transforms.add_identity,
    @grax.graph_utils.transforms.symmetric_normalize,
]

grax.graph_utils.transforms.to_format.fmt = "dense"

module_fun = @dagnn.DAGNN
dagnn.DAGNN.num_classes = %num_classes
dagnn.DAGNN.hidden_filters = %filters
dagnn.DAGNN.dropout_rate = %dropout_rate
dagnn.DAGNN.num_propagations = %num_propagations
dagnn.DAGNN.gate_activation = %gate_activation

gate_activation = @jax.nn.sigmoid

optimizer = @optax.chain_star()
optax.chain_star.transforms = [
    @optax.additive_weight_decay(),
    @optax.adam(),
]

optax.adam.learning_rate = %lr
optax.additive_weight_decay.weight_decay = %weight_decay

lr = 1e-2
filters = 64

steps = 1000
patience = 100
monitor = 'loss'
