import huf.configurables

import grax.config
import grax.graph_utils.transforms
import grax.hk_utils
import grax.projects.gcn2.modules

include "grax_config/single/data/transformed.gin"

node_features_transform = [
    @grax.graph_utils.transforms.row_normalize,
    @grax.graph_utils.transforms.to_format
]
graph_transform = [
    @grax.graph_utils.transforms.add_identity,
    @grax.graph_utils.transforms.symmetric_normalize,
]

grax.graph_utils.transforms.to_format.fmt = %fmt

fmt = "dense"

module_fun = @gcn2.GCN2

gcn2.GCN2.num_hidden_layers = %num_hidden_layers
gcn2.GCN2.filters = %filters
gcn2.GCN2.variant = %variant
gcn2.GCN2.num_classes = %num_classes
gcn2.GCN2.lam = %lam
gcn2.GCN2.dropout_rate = %dropout_rate

optimizer = @optax.chain_star()
optax.chain_star.transforms = [
    @gcn2.partitioned_additive_weight_decay(),
    @optax.adam(),
]

gcn2.partitioned_additive_weight_decay.linear_weight_decay = %linear_weight_decay
gcn2.partitioned_additive_weight_decay.conv_weight_decay = %conv_weight_decay

optax.adam.learning_rate = %lr

lr = 1e-2
filters = 64
num_hidden_layers = 64
variant = False
conv_weight_decay = 1e-2  # wd1 in original
linear_weight_decay = 5e-4  # wd2 in original
lam = 0.5
dropout_rate = 0.6

steps = 1500
patience = 100
